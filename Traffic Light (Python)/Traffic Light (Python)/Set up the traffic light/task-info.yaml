type: edu
files:
  - name: traffic_light.py
    visible: true
    text: |
      print("Hello World!")
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import re
      from hstest import StageTest, CheckResult, WrongAnswer, TestedProgram, dynamic_test
      
      
      def check_menu(lines, test_case):
          ADD_INFO = f"Incorrect menu output in the following case: {test_case}. "
          if len(lines) != 5:
              raise WrongAnswer(f"{ADD_INFO}It should contain exactly 5 lines but there were {len(lines)} instead")
          if "menu" not in lines[0]:
              raise WrongAnswer(f"{ADD_INFO}First line should contain \"Menu\" substring")
      
          starts = ["1", "2", "3", "0"]
          contain = ["Add", "Delete", "System", "Quit"]
          for i in range(len(starts)):
              if not lines[1 + i].startswith(starts[i]) or not contain[i].lower() in lines[1 + i]:
                  raise WrongAnswer(
                      f"The {i + 1} line of menu list should start with \"{starts[i]}\" as an option from list and " +
                      f"contain \"{contain[i]}\" substring as in example")
      
      
      class TrafficLightTest(StageTest):
      
          @dynamic_test
          def test_initial_and_menu(self):
              pr = TestedProgram()
              output = pr.start().lower()
              lines = re.split(r"[\r\n]+", output.strip())
      
              if len(lines) != 2:
                  return CheckResult.wrong("There should be exactly 2 lines in the output when the program just started, " +
                                           f"but there were {len(lines)} instead")
      
              if ("welcome" not in lines[0]) or ("traffic management system" not in lines[0]):
                  return CheckResult.wrong("The first line of output should contain a greeting, as in example")
              if ("input" not in lines[1]) or ("number" not in lines[1]):
                  return CheckResult.wrong("When the program just started, there should be a line, that asks user to input " +
                                           "number of roads with \"Input\" and \"Number\" substrings")
      
              output = pr.execute("5").lower()
              lines = re.split(r"[\r\n]+", output.strip())
      
              if len(lines) != 1:
                  return CheckResult.wrong("There should be exactly 1 line printed when the user inputted desired number " +
                                           f"of roads, but there were {len(lines)} instead")
              if ("input" not in lines[0]) or ("interval" not in lines[0]):
                  return CheckResult.wrong("When the user provided number of roads, there should be a line, that asks user " +
                                           "to input interval value with \"Input\" and \"Interval\" substrings")
      
              output = pr.execute("3").lower()
              check_menu(re.split(r"[\r\n]+", output.strip()), "Start of the program")
      
              pr.execute("0")
              if not pr.is_finished():
                  return CheckResult.wrong("When user inputted '0' as a desired option, program should finish it's execution")
      
              return CheckResult.correct()
      
          @dynamic_test
          def test_stubs(self):
              pr = TestedProgram()
              pr.start()
              pr.execute("5")
              pr.execute("3")
      
              starts = ["1", "2", "3", "0"]
              contain = ["add", "delete", "system", "quit"]
              for i in range(len(starts) - 1):
                  output = pr.execute(starts[i]).lower()
                  lines = re.split(r"[\r\n]+", output.strip())
                  if len(lines) != 6:
                      return CheckResult.wrong(
                          "After any chosen option (except '0') there should be printed exactly 6 non-empty " +
                          "lines, containing simple one-line stub and menu")
                  if contain[i] not in lines[0]:
                      return CheckResult.wrong(
                          f"If the user had chosen '{starts[i]}' as an option, the first line of an output" +
                          f" (stub) should contain \"{contain[i]}\" substring")
      
                  check_menu(lines[1:6], "Stub shown up.")
      
                  if pr.is_finished():
                      return CheckResult.wrong("Option's selection should be looped")
      
              pr.execute("0")
              if not pr.is_finished():
                  return CheckResult.wrong(
                      "After user inputted '0' as a desired option, program should finish it's execution");
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          TrafficLightTest().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import TrafficLightTest
      
      if __name__ == '__main__':    TrafficLightTest().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/29124#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 20 May 2024 18:00:00 UTC"
record: 2
