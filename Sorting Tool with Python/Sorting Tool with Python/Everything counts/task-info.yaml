type: edu
files:
  - name: main.py
    visible: true
    text: |
      while True:
          try:
              data = input()
          except EOFError:
              break
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import re
      from typing import List, Any
      
      from hstest.testing.settings import Settings
      from hstest import *
      
      
      class SortingToolStage4Test(StageTest):
      
          def generate(self) -> List[TestCase]:
              Settings.allow_out_of_input = True
              return stage4_tests()
      
          def check(self, reply: str, clue: Any) -> CheckResult:
              if 'byCount' in clue.args:
                  return self.by_count(reply, clue)
              else:
                  return self.natural(reply, clue)
      
          def by_count(self, reply: str, clue: Any):
              if 'long' in clue.args:
                  return check_by_count(parse_long_tokens(clue.console_input), clue, reply)
              elif 'word' in clue.args:
                  return check_by_count(parse_word_tokens(clue.console_input), clue, reply)
              elif 'line' in clue.args:
                  return check_by_count(parse_line_tokens(clue.console_input), clue, reply)
      
          def natural(self, reply: str, clue: Any):
              if 'long' in clue.args:
                  return check_natural(parse_long_tokens(clue.console_input), clue, reply)
              elif 'word' in clue.args:
                  return check_natural(parse_word_tokens(clue.console_input), clue, reply)
              elif 'line' in clue.args:
                  return check_natural(parse_line_tokens(clue.console_input), clue, reply)
      
      
      class SortingToolClue:
          def __init__(self, console_input, reveal_test, args):
              self.console_input = console_input
              self.reveal_test = reveal_test
              self.args = args
      
      
      def reveal_raw_test(clue, reply):
          return f"Args:\n{' '.join(clue.args)}\nInput:\n{clue.console_input}\nYour output:\n{reply}\n\n"
      
      
      def create_test(console_input, reveal_test, args=None):
          if args is None:
              args = ['-dataType', 'long']
          return TestCase(args=args, stdin=console_input, attach=SortingToolClue(console_input, reveal_test, args))
      
      
      def stage4_tests() -> List[TestCase]:
          return [create_test('1 -2   333 4\n42\n1                 1'.strip(), True,
                              ['-dataType', 'long', '-sortingType', 'natural']),
                  create_test('1 -2   333 4\n42\n1                 1'.strip(), True, ['-dataType', 'long']),
                  create_test('1 -2   333 4\n42\n1                 1'.strip(), True,
                              ['-sortingType', 'byCount', '-dataType', 'long']),
                  create_test('1 -2   333 4\n42\n1                 1'.strip(), True,
                              ['-sortingType', 'byCount', '-dataType', 'word']),
                  create_test('1 -2   333 4\n42\n42\n1                 1'.strip(), True,
                              ['-sortingType', 'byCount', '-dataType', 'line']),
                  create_test('1 -2   333 4\n42\n42\n1                 1'.strip(), True,
                              ['-sortingType', 'natural', '-dataType', 'line']),
                  create_test('22222\n1111 1111\n3\n44'.strip(), False, ['-sortingType', 'byCount', '-dataType', 'line']),
                  create_test('22222\n1111 1111\n3\n44'.strip(), False, ['-sortingType', 'natural', '-dataType', 'line']),
                  create_test('22222\n1111 1111\n3\n44'.strip(), False, ['-sortingType', 'byCount', '-dataType', 'word']),
                  create_test('22222\n1111 1111\n3\n44'.strip(), False, ['-sortingType', 'byCount', '-dataType', 'long'])]
      
      
      def parse_long_tokens(inp):
          array = []
          for i in inp.split():
              array.append(int(i))
          return array
      
      
      def parse_word_tokens(inp):
          return inp.split()
      
      
      def parse_line_tokens(inp):
          return inp.splitlines()
      
      
      def check_natural(actual_tokens, clue, reply):
          reply = reply.strip()
          lines = reply.splitlines()
      
          if 'long' in clue.args:
              if len(lines) != 2:
                  if clue.reveal_test:
                      return CheckResult.wrong(
                          f"Can't parse your output for sorting longs naturally: expected 2 lines.\n"
                          + reveal_raw_test(clue, reply))
                  else:
                      return CheckResult.wrong("Can't parse your output for sorting longs naturally: expected 2 lines.")
          elif 'line' in clue.args:
              if len(lines) != 2 + len(actual_tokens):
                  if clue.reveal_test:
                      return CheckResult.wrong(
                          f"Can't parse your output. Expected {2 + len(actual_tokens)} lines for sorting lines naturally.\n"
                          + reveal_raw_test(clue, reply))
                  else:
                      return CheckResult.wrong(
                          f"Can't parse your output. Expected (2+n) lines for sorting lines naturally.")
      
          total_match = re.search(r'(?P<total>\d+)', lines[0])
          if total_match is None:
              if clue.reveal_test:
                  return CheckResult.wrong("The first line of your output after sorting naturally should contain a number\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong("The first line of your output after sorting naturally should contain a number")
      
          total = int(total_match.group('total'))
          actual_total = len(actual_tokens)
      
          if actual_total != total:
              if clue.reveal_test:
                  return CheckResult.wrong(f"Total amount of tokens ({total}) is incorrect. Expected: {actual_total}.\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong(
                      "Printed total amount of tokens after sorting naturally is incorrect for some testcases")
      
          actual_tokens.sort()
      
          if ':' not in lines[1]:
              return CheckResult.wrong("Second line of your output after sorting naturally does not contain ':' character")
          sorted_tokens = []
          if 'long' in clue.args:
              sort_line = lines[1].split(':')[1].strip()
      
              def check_int(s):
                  if s and s[0] in ('-', '+'):
                      return s[1:].isdigit()
                  return s.isdigit()
      
              for token in sort_line.split(' '):
                  if not check_int(token):
                      return CheckResult.wrong(
                          "After ':' symbol there should be printed all the tokens, "
                          "divided by space character for 'word' and 'long' data type.")
              sorted_tokens = parse_long_tokens(sort_line)
          elif 'line' in clue.args:
              sorted_tokens = parse_line_tokens("\n".join(lines[2:]))
      
          if actual_total != len(sorted_tokens):
              if clue.reveal_test:
                  return CheckResult.wrong(
                      f"Total amount of sorted tokens ({len(sorted_tokens)}) is incorrect. Expected: {actual_total}.\n"
                      + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong("Total amount of sorted tokens is incorrect for some testcases.")
          if sorted_tokens != actual_tokens:
              if clue.reveal_test:
                  return CheckResult.wrong(f"Some tokens were sorted incorrectly.\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong("Some tokens were sorted incorrectly.")
      
          return CheckResult.correct()
      
      
      def check_by_count(actual_tokens, clue, reply):
          reply = reply.strip()
          lines = reply.splitlines()
      
          if len(lines) == 0:
              if clue.reveal_test:
                  return CheckResult.wrong("The first line of your output after sorting by count should contain a number\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong("The first line of your output after sorting by count should contain a number")
      
          total_match = re.search(r'(?P<total>\d+)', lines[0])
          if total_match is None:
              if clue.reveal_test:
                  return CheckResult.wrong("The first line of your output after sorting by count should contain a number\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong("The first line of your output after sorting by count should contain a number")
      
          total = int(total_match.group('total'))
          actual_total = len(actual_tokens)
      
          if actual_total != total:
              if clue.reveal_test:
                  return CheckResult.wrong(f"Total amount of tokens ({total}) is incorrect. Expected: {actual_total}.\n"
                                           + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong(
                      "Printed total amount of tokens after sorting by count is incorrect for some testcases")
      
          sort = sorted(actual_tokens)
          sort = sorted(sort, key=lambda x: actual_tokens.count(x), reverse=False)
          token_to_count = dict.fromkeys(sort)
          for i in token_to_count.keys():
              token_to_count[i] = actual_tokens.count(i)
      
          actual_sorted_by_count = list(token_to_count)
      
          lines_with_tokens = lines[1:]
      
          if len(actual_sorted_by_count) != len(lines_with_tokens):
              if clue.reveal_test:
                  return CheckResult.wrong(
                      f"Amount of lines with tokens (after 'Total numbers:' line in byCount sort) ({len(lines_with_tokens)}) "
                      f"is incorrect. Expected: {len(actual_sorted_by_count)}.\n"
                      + reveal_raw_test(clue, reply))
              else:
                  return CheckResult.wrong(
                      "Amount of lines with tokens (after 'Total numbers:' line in byCount sort) is incorrect")
      
          for i in range(0, len(lines_with_tokens)):
              if ':' not in lines_with_tokens[i]:
                  return CheckResult.wrong("Each line with token in byCount sort should contain ':' character")
              token = lines_with_tokens[i].split(':')[0]
              info = lines_with_tokens[i].split(':')[1]
      
              info_match = re.search(r'(?P<count>\d+)\D+(?P<percentage>\d+)', info)
      
              count_actual_token = token_to_count[actual_sorted_by_count[i]]
              if info_match is None:
                  if clue.reveal_test:
                      return CheckResult.wrong(
                          f"Token ({lines_with_tokens[i]}) contains incorrect info. Expected: {actual_sorted_by_count[i]}: "
                          f"{count_actual_token} time(s), {int(count_actual_token / len(actual_tokens) * 100)}%.\n "
                          + reveal_raw_test(clue, reply))
                  else:
                      return CheckResult.wrong("Some of printed token lines in byCount sort contain incorrect info, or were "
                                               "not sorted correctly")
              token_count = info_match.group('count')
              token_percentage = info_match.group('percentage')
      
              if token != str(actual_sorted_by_count[i]) or token_count != str(count_actual_token) \
                      or token_percentage != str(int(count_actual_token / len(actual_tokens) * 100)):
                  if clue.reveal_test:
                      return CheckResult.wrong(
                          f"Token ({lines_with_tokens[i]}) contains incorrect info. Expected: {actual_sorted_by_count[i]}: "
                          f"{count_actual_token} time(s), {int(count_actual_token / len(actual_tokens) * 100)}%.\n "
                          + reveal_raw_test(clue, reply))
                  else:
                      return CheckResult.wrong("Some of printed token lines in byCount sort contain incorrect info, or were "
                                               "not sorted correctly")
      
          return CheckResult.correct()
      
      
      if __name__ == '__main__':
          SortingToolStage4Test().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |
      from test.tests import SortingToolStage4Test, Settings
      
      if __name__ == '__main__':
          Settings.allow_out_of_input = True
          SortingToolStage4Test().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/projects/307/stages/1724/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 14 May 2024 23:52:54 UTC"
record: 4
